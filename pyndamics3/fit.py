# AUTOGENERATED! DO NOT EDIT! File to edit: 03_fit.ipynb (unless otherwise specified).

__all__ = ['Parameter', 'residual', 'fit']

# Cell
import lmfit

# Cell
def Parameter(name,**kwargs):
    from lmfit import Parameters
    params = Parameters()
    params.add(name, **kwargs)

    return params


def residual(ps, sim):

    params={}
    for key in ps.keys():
        if key.startswith('initial_'):
            name=key.split('initial_')[1]
            _c=sim.get_component(name)
            _c.initial_value=ps[key].value

        else:
            params[key]=ps[key].value

    sim.params(**params)

    # run the sim
    sim.run_fast()

    # compare with data
    value=0.0
    for _c in sim.components:
        if not _c.data:
            continue
        t=np.array(_c.data['t']).ravel()
        y=np.array(_c.data['value']).ravel()
        y_fit=sim.interpolate(t,_c.name)

        if any(np.isnan(y_fit)):
            return -np.inf

        if any(abs(y_fit)>1e100):
            return -np.inf


        value+=(y-y_fit)

    return value


def fit(sim,
       *args):

    from lmfit import Parameters,minimize

    fitparams=Parameters()
    for arg in args:
        fitparams+=arg


    result = minimize(residual, fitparams, args=(sim,), method='leastsq')

    params={}
    ps=result.params
    for key in ps.keys():
        if key.startswith('initial_'):
            name=key.split('initial_')[1]
            _c=sim.get_component(name)
            _c.initial_value=ps[key].value

        else:
            params[key]=ps[key].value

    sim.params(**params)


    return result

